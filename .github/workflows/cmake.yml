name: CMake

defaults:
  run:
    shell: bash -ieo pipefail {0}

on:
  push:
    branches: [ master, alpha ]
  pull_request:
    branches: [ master ]
  schedule:
    - cron: '0 0 * * 1'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        echo "install ZAF"
        cd ${{github.workspace}}/../
        git clone --depth 1 https://github.com/zzxx-husky/inst_scripts
        ./inst_scripts/install_coll.sh --deps-only
        cd ${{github.workspace}}

        echo "Install Clang"
        sudo apt install clang
        clang --version
        clang++ --version

    - name: Configure CMake
      # Configure CMake in a 'release' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        source ${{github.workspace}}/../inst_scripts/instrc.sh
        echo ${ZMQ_ROOT}
        echo ${GTEST_ROOT}
        echo ${GLOG_ROOT}
        echo ${PHMAP_ROOT}
        echo ${ZAF_ROOT}
        cmake -S . -B ${{github.workspace}}/release -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/release -j4

    - name: Test
      working-directory: ${{github.workspace}}/release
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: timeout 10 ./tests/Tests

    - name: Examples
      working-directory: ${{github.workspace}}/release
      run: |
        echo "Run HelloWorld"
        timeout 10 ./examples/HelloWorld
        echo "Run Calendar"
        timeout 10 ./examples/Calendar
        echo "Run FirstNMax"
        timeout 10 ./examples/FirstNMax
        echo "Run TopkFreqWords"
        timeout 10 ./examples/TopkFreqWords
        echo "RUn SortUnique"
        timeout 10 ./examples/SortUnique
        echo "ParallelSort"
        timeout 20 ./benchmarks/ParallelSort

    - name: BuildMini
      run: |
        source ${{github.workspace}}/../inst_scripts/instrc.sh
        cmake -S . -B ${{github.workspace}}/release_mini -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DENABLE_TEST=false -DENABLE_PARALLEL=false
        cmake --build ${{github.workspace}}/release_mini -j4
        cd ${{github.workspace}}/release_mini
        echo "Run HelloWorld"
        timeout 10 ./examples/HelloWorld
        echo "Run Calendar"
        timeout 10 ./examples/Calendar
        echo "Run FirstNMax"
        timeout 10 ./examples/FirstNMax
        echo "Run TopkFreqWords"
        timeout 10 ./examples/TopkFreqWords
        echo "RUn SortUnique"
        timeout 10 ./examples/SortUnique

    - name: Gperftools Heap Profile
      working-directory: ${{github.workspace}}/release
      run: |
        PPROF_PATH="$(which pprof)" HEAPCHECK=strict timeout 30 ./examples/HelloWorld
        PPROF_PATH="$(which pprof)" HEAPCHECK=strict timeout 30 ./examples/Calendar

    - name: Compile with Clang
      run: |
        source ${{github.workspace}}/../inst_scripts/instrc.sh
        cmake -S . -B ${{github.workspace}}/release_clang -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        cmake --build ${{github.workspace}}/release_clang -j4
        cd ${{github.workspace}}/release_clang
        echo "Run HelloWorld"
        timeout 10 ./examples/HelloWorld
        echo "Run Calendar"
        timeout 10 ./examples/Calendar
        echo "Run FirstNMax"
        timeout 10 ./examples/FirstNMax
        echo "Run TopkFreqWords"
        timeout 10 ./examples/TopkFreqWords
        echo "RUn SortUnique"
        timeout 10 ./examples/SortUnique
      env:
        CC: clang
        CXX: clang++
